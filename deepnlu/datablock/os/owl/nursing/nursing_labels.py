
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# pylint:disable=bad-whitespace
# pylint:disable=line-too-long
# pylint:disable=too-many-lines
# pylint:disable=invalid-name

# #########################################################
#
#       ************** !! WARNING !! ***************
#       ******* THIS FILE WAS AUTO-GENERATED *******
#       ********* DO NOT MODIFY THIS FILE **********
#
# #########################################################

class NursingLabels(object):

    @staticmethod
    def prov() -> dict:
        return {
 'action': ['router.py',
            'plac_core.py',
            'owl2py_orchestrator.py',
            'generate_runtime_dictionaries.py',
            'generate_runtime_dictionary.py',
            'owl_data_load_dict.py',
            'common_utils.py'],
 'config': {'classname': 'NursingLabels',
            'filename': 'nursing_labels',
            'queries': ['labels.sparql'],
            'reverse': True,
            'transformers': ['labels']},
 'source': 'nursing.owl',
 'time': '2022-05-20 17:02:25.370703'}

    __data = {
    'activity': ['Activity'],
    'acute_care': ['Acute Care'],
    'admission': ['Admission'],
    'advanced_practice_registered_nurse': [   'Advanced Practice Registered '
                                              'Nurse'],
    'agent': ['Agent'],
    'airport': ['Airport'],
    'american': ['American'],
    'american_association_of_colleges_of_nursing': [   'American Association '
                                                       'of Colleges of '
                                                       'Nursing'],
    'american_nurses_association': ['American Nurses Association'],
    'apothecary': ['Apothecary'],
    'artifact': ['Artifact'],
    'associates_degree': ["Associate's Degree"],
    'association': ['Association'],
    'bachelor_of_arts': ['Bachelor of Arts'],
    'bachelor_of_science': ['Bachelor of Science'],
    'bachelor_of_science_in_nursing': ['Bachelor of Science in Nursing'],
    'bachelors_degree': ["Bachelor's Degree"],
    'bias': ['Bias'],
    'building': ['Building'],
    'cardinal': ['Cardinal'],
    'care_event': ['Care Event'],
    'catholic_church': ['Catholic Church'],
    'century': ['Century'],
    'certification': ['Certification'],
    'chemist': ['Chemist'],
    'church': ['Church'],
    'city': ['City'],
    'clinic': ['Clinic'],
    'clinical_competency': ['Clinical Competency'],
    'clinical_evaluation': ['Clinical Evaluation'],
    'clinical_outcome': ['Clinical Outcome'],
    'clinical_outcome_evaluation': ['Clinical Outcome Evaluation'],
    'clinical_training': ['Clinical Training'],
    'closure': ['Closure'],
    'college': ['College'],
    'company': ['Company'],
    'competency': ['Competency'],
    'condition': ['Condition'],
    'continent': ['Continent'],
    'continuous_learning': ['Continuous Learning'],
    'country': ['Country'],
    'course': ['Course'],
    'date': ['Date'],
    'department': ['Department'],
    'development': ['Development'],
    'diploma': ['Diploma'],
    'doctoral_degree': ['Doctoral Degree'],
    'education': ['Education'],
    'educator': ['Educator'],
    'elapsed_time': ['Elapsed Time'],
    'elderly_patient': ['Elderly Patient'],
    'emergency_room': ['Emergency Room'],
    'empathy': ['Empathy'],
    'ethical_practice': ['Ethical Practice'],
    'europe': ['Europe'],
    'evaluation': ['Evaluation'],
    'event': ['Event'],
    'facility_closure': ['Facility Closure'],
    'fail_to_rescue_rate': ['Fail To Rescue Rate'],
    'fair_pay': ['Fair Pay'],
    'family_nurse_practitioner': ['Family Nurse Practitioner'],
    'female_patient': ['Female Patient'],
    'florence_nightingale': ['Florence Nightingale'],
    'gender_bias': ['Gender Bias'],
    'geopolitical_entity': ['Geopolitical Entity'],
    'group': ['Group'],
    'health': ['Health'],
    'health_care': ['Health Care'],
    'health_care_education': ['Health Care Education'],
    'health_care_provider': ['Health Care Provider'],
    'health_care_quality': ['Health Care Quality'],
    'health_care_reform': ['Health Care Reform'],
    'health_care_specialist': ['Health Care Specialist'],
    'health_department': ['Health Department'],
    'historical_nursing': ['Historical Nursing'],
    'history': ['History'],
    'home': ['Home'],
    'hospital': ['Hospital'],
    'johnson_and_johnson': ['Johnson & Johnson'],
    'labor_event': ['Labor Event'],
    'language': ['Language'],
    'learning': ['Learning'],
    'location': ['Location'],
    'long_term_health_care': ['Long Term Health Care'],
    'male_patient': ['Male Patient'],
    'master_of_arts': ['Master of Arts'],
    'master_of_science': ['Master of Science'],
    'master_of_science_in_nursing': ['Master of Science in Nursing'],
    'masters_degree': ["Master's Degree"],
    'medical_building': ['Medical Building'],
    'medical_facility_closure': ['Medical Facility Closure'],
    'mental_health': ['Mental Health'],
    'modern_nursing': ['Modern Nursing'],
    'money': ['Money'],
    'mortality_rate': ['Mortality Rate'],
    'national_certification': ['National Certification'],
    'nationality': ['Nationality'],
    'nurse': ['Nurse'],
    'nurse_educator': ['Nurse Educator'],
    'nurse_practitioner': ['Nurse Practitioner'],
    'nursing': ['Nursing'],
    'nursing_diploma': ['Nursing Diploma'],
    'nursing_education': ['Nursing Education'],
    'nursing_home': ['Nursing Home'],
    'nursing_school': ['Nursing School'],
    'nursing_student': ['Nursing Student'],
    'ordinal': ['Ordinal'],
    'organization': ['Organization'],
    'outcome': ['Outcome'],
    'outcome_evaluation': ['Outcome Evaluation'],
    'patient': ['Patient'],
    'patient_care': ['Patient Care'],
    'patient_treatment': ['Patient Treatment'],
    'patient_treatment_plan': ['Patient Treatment Plan'],
    'pay': ['Pay'],
    'pediactric_patient': ['Pediactric Patient'],
    'peer_review': ['Peer Review'],
    'percent': ['Percent'],
    'permanent': ['Permanent'],
    'person': ['Person'],
    'personal_touch': ['Personal Touch'],
    'pharmacist': ['Pharmacist'],
    'pharmacy': ['Pharmacy'],
    'physician': ['Physician'],
    'plan': ['Plan'],
    'political_activity': ['Political Activity'],
    'political_group': ['Political Group'],
    'practice': ['Practice'],
    'primary_care': ['Primary Care'],
    'product': ['Product'],
    'profession': ['Profession'],
    'professional_development': ['Professional Development'],
    'protestant_church': ['Protestant Church'],
    'provider': ['Provider'],
    'psychiatric_mental_health_nurse_practitioner': [   'Psychiatric Mental '
                                                        'Health Nurse '
                                                        'Practitioner'],
    'public_health_department': ['Public Health Department'],
    'quality': ['Quality'],
    'quantifiable_measurement': ['Quantifiable Measurement'],
    'quantity': ['Quantity'],
    'racial_bias': ['Racial Bias'],
    'readmission': ['Readmission'],
    'readmission_rate': ['Readmission Rate'],
    'receiver': ['Receiver'],
    'reform': ['Reform'],
    'registered_nurse': ['Registered Nurse'],
    'regulation': ['Regulation'],
    'religious_group': ['Religious Group'],
    'room': ['Room'],
    'rule': ['Rule'],
    'school': ['School'],
    'shortage': ['Shortage'],
    'site': ['Site'],
    'skill': ['Skill'],
    'soft_skill': ['Soft Skill'],
    'spain': ['Spain'],
    'spanish': ['Spanish'],
    'spanish_hospital': ['Spanish Hospital'],
    'specialist': ['Specialist'],
    'staff': ['Staff'],
    'staffing': ['Staffing'],
    'staffing_level': ['Staffing Level'],
    'staffing_shortage': ['Staffing Shortage'],
    'strike': ['Strike'],
    'student': ['Student'],
    'surgeon': ['Surgeon'],
    'surgery': ['Surgery'],
    'temporary': ['Temporary'],
    'time': ['Time'],
    'training': ['Training'],
    'training_event': ['Training Event'],
    'treatment_event': ['Treatment Event'],
    'urgent_care': ['Urgent Care'],
    'work_of_art': ['Work of Art']}

    def data(self) -> dict:
        return self.__data

    def find(self,
             term: str) -> str or None:
        if term in self.__data:
            return self.__data[term]
