
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# pylint:disable=bad-whitespace
# pylint:disable=line-too-long
# pylint:disable=too-many-lines
# pylint:disable=invalid-name

# #########################################################
#
#       ************** !! WARNING !! ***************
#       ******* THIS FILE WAS AUTO-GENERATED *******
#       ********* DO NOT MODIFY THIS FILE **********
#
# #########################################################

class OntologicaSpans(object):

    @staticmethod
    def prov() -> dict:
        return {
 'action': ['router.py',
            'plac_core.py',
            'owl2py_orchestrator.py',
            'generate_runtime_dictionaries.py',
            'generate_runtime_dictionary.py',
            'owl_data_load_dict.py',
            'common_utils.py'],
 'config': {'classname': 'OntologicaSpans',
            'filename': 'ontologica_spans',
            'queries': ['spans.sparql'],
            'transformers': ['spans']},
 'source': 'ontologica.owl',
 'time': '2022-05-03 17:49:06.606446'}

    __data = {
    'ancestor': [   {   'canon': 'ancestor_of',
                        'content': {'nodes'},
                        'distance': 3,
                        'forward': True,
                        'reverse': True}],
    'appraisal': [   {   'canon': 'appraisal_ontology',
                         'content': {'ontology'},
                         'distance': 3,
                         'forward': True,
                         'reverse': True}],
    'can': [   {   'canon': 'list_response',
                   'content': {'show'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True}],
    'child': [   {   'canon': 'child_of',
                     'content': {'nodes'},
                     'distance': 3,
                     'forward': True,
                     'reverse': True}],
    'descendant': [   {   'canon': 'descendant_of',
                          'content': {'nodes'},
                          'distance': 3,
                          'forward': True,
                          'reverse': True}],
    'i': [   {   'canon': 'list_response',
                 'content': {'want', 'see'},
                 'distance': 3,
                 'forward': True,
                 'reverse': True}],
    'john': [   {   'canon': 'john_kao_model',
                    'content': {'kao', 'model'},
                    'distance': 3,
                    'forward': True,
                    'reverse': True},
                {   'canon': 'john_kao',
                    'content': {'kao'},
                    'distance': 3,
                    'forward': True,
                    'reverse': True}],
    'list': [   {   'canon': 'list_query',
                    'content': {'query'},
                    'distance': 3,
                    'forward': True,
                    'reverse': True},
                {   'canon': 'list_query',
                    'content': {'items'},
                    'distance': 3,
                    'forward': True,
                    'reverse': True},
                {   'canon': 'list_response',
                    'content': {'response'},
                    'distance': 3,
                    'forward': True,
                    'reverse': True}],
    'multi': [   {   'canon': 'multi_item_response',
                     'content': {'response', 'item'},
                     'distance': 3,
                     'forward': True,
                     'reverse': True}],
    'no': [   {   'canon': 'no_parent_of',
                  'content': {'parent'},
                  'distance': 3,
                  'forward': True,
                  'reverse': True},
              {   'canon': 'no_parent_of',
                  'content': {'parents'},
                  'distance': 3,
                  'forward': True,
                  'reverse': True},
              {   'canon': 'no_descendant_of',
                  'content': {'descendant'},
                  'distance': 3,
                  'forward': True,
                  'reverse': True},
              {   'canon': 'no_descendant_of',
                  'content': {'descendants'},
                  'distance': 3,
                  'forward': True,
                  'reverse': True},
              {   'canon': 'no_ancestor_of',
                  'content': {'ancestor'},
                  'distance': 3,
                  'forward': True,
                  'reverse': True},
              {   'canon': 'no_quantity',
                  'content': {'quantity'},
                  'distance': 3,
                  'forward': True,
                  'reverse': True}],
    'not': [   {   'canon': 'no_parent_of',
                   'content': {'parent'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True},
               {   'canon': 'no_parent_of',
                   'content': {'parents'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True},
               {   'canon': 'no_descendant_of',
                   'content': {'descendants'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True},
               {   'canon': 'no_ancestor_of',
                   'content': {'ancestor'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True},
               {   'canon': 'no_ancestor_of',
                   'content': {'ancestor'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True}],
    'nursing': [   {   'canon': 'nursing_ontology',
                       'content': {'ontology'},
                       'distance': 3,
                       'forward': True,
                       'reverse': True}],
    'one': [   {   'canon': 'one_item_response',
                   'content': {'response', 'item'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True}],
    'ontologica': [   {   'canon': 'ontologica_ontology',
                          'content': {'ontology'},
                          'distance': 3,
                          'forward': True,
                          'reverse': True}],
    'parent': [   {   'canon': 'parent_of',
                      'content': {'nodes'},
                      'distance': 3,
                      'forward': True,
                      'reverse': True}],
    'query': [   {   'canon': 'query_classification',
                     'content': {'classification'},
                     'distance': 3,
                     'forward': True,
                     'reverse': True}],
    'question': [   {   'canon': 'question_understood',
                        'content': {'understood'},
                        'distance': 3,
                        'forward': True,
                        'reverse': True},
                    {   'canon': 'question_not_understood',
                        'content': {'understood'},
                        'distance': 3,
                        'forward': True,
                        'reverse': True}],
    'random': [   {   'canon': 'random_query',
                      'content': {'query'},
                      'distance': 3,
                      'forward': True,
                      'reverse': True}],
    'show': [   {   'canon': 'list_query',
                    'content': {'items'},
                    'distance': 3,
                    'forward': True,
                    'reverse': True}],
    'skills': [   {   'canon': 'skills_ontology',
                      'content': {'ontology'},
                      'distance': 3,
                      'forward': True,
                      'reverse': True}],
    'speech': [   {   'canon': 'speech_disorder_model',
                      'content': {'disorder', 'model'},
                      'distance': 3,
                      'forward': True,
                      'reverse': True},
                  {   'canon': 'speech_disorder_model',
                      'content': {'disorder'},
                      'distance': 3,
                      'forward': True,
                      'reverse': True},
                  {   'canon': 'speech_pathology_model',
                      'content': {'pathology', 'model'},
                      'distance': 3,
                      'forward': True,
                      'reverse': True},
                  {   'canon': 'speech_pathology_model',
                      'content': {'pathology'},
                      'distance': 3,
                      'forward': True,
                      'reverse': True}],
    'taxonomical': [   {   'canon': 'taxonomical_classification',
                           'content': {'classification'},
                           'distance': 3,
                           'forward': True,
                           'reverse': True}],
    'text': [   {   'canon': 'text_classification',
                    'content': {'classification'},
                    'distance': 3,
                    'forward': True,
                    'reverse': True}],
    'the': [   {   'canon': 'ancestor_of',
                   'content': {'ancestors'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True},
               {   'canon': 'parent_of',
                   'content': {'parent'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True}],
    'three': [   {   'canon': 'three_item_response',
                     'content': {'response', 'item'},
                     'distance': 3,
                     'forward': True,
                     'reverse': True}],
    'two': [   {   'canon': 'two_item_response',
                   'content': {'response', 'item'},
                   'distance': 3,
                   'forward': True,
                   'reverse': True}]}

    def data(self) -> dict:
        return self.__data

    def find(self,
             term: str) -> str or None:
        if term in self.__data:
            return self.__data[term]
