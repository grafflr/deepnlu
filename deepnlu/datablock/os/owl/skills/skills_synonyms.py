
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# pylint:disable=bad-whitespace
# pylint:disable=line-too-long
# pylint:disable=too-many-lines
# pylint:disable=invalid-name

# #########################################################
#
#       ************** !! WARNING !! ***************
#       ******* THIS FILE WAS AUTO-GENERATED *******
#       ********* DO NOT MODIFY THIS FILE **********
#
# #########################################################

class SkillsSynonyms(object):

    @staticmethod
    def prov() -> dict:
        return {
 'action': ['router.py',
            'plac_core.py',
            'owl2py_orchestrator.py',
            'generate_runtime_dictionaries.py',
            'generate_runtime_dictionary.py',
            'owl_data_load_dict.py',
            'common_utils.py'],
 'config': {'classname': 'SkillsSynonyms',
            'filename': 'skills_synonyms',
            'files': ['skills.txt'],
            'queries': ['synonyms.sparql'],
            'reverse': True,
            'transformers': ['lowercase', 'synonyms']},
 'source': 'skills.owl',
 'time': '2022-04-27 21:15:54.403855'}

    __data = {
    'ability': ['ability'],
    'academic': ['academics', 'academia', 'academic'],
    'activist': ['activists', 'activism', 'activist'],
    'advisor': ['advisors', 'advisor'],
    'advocate': ['advocating', 'advocates', 'advocate', 'adovacy'],
    'agenda': ['agendas', 'agenda'],
    'artifact': ['artifact'],
    'author': ['authors', 'author'],
    'beginner': ['beginner', 'novice'],
    'board_chair': [   'chairwoman of the board',
                       'chairman of the board',
                       'board_chair chair',
                       'present chair',
                       'chair person',
                       'chair of the',
                       'chair people',
                       'board chair',
                       'chairpeople',
                       'chair woman',
                       'chair women',
                       'chairperson',
                       'chairwomen',
                       'past chair',
                       'chairwoman',
                       'chair men',
                       'chair man',
                       'chairman',
                       'chair of',
                       'chairing',
                       'chairmen'],
    'business_academic': ['business academic'],
    'business_creativity': ['business creativity'],
    'business_role': ['business role'],
    'business_school': ['business school'],
    'ceo': ['chief executive officer', 'ceo'],
    'chief_strategy_officer': ['chief strategy officer'],
    'communication': ['communication'],
    'company': ['companies', 'company'],
    'council': ['council'],
    'creative': ['creativity', 'creative'],
    'cto': ['chief technical officer', 'cto'],
    'cxo': ['cxo'],
    'deliver': ['delivers', 'deliver'],
    'delivery': ['delivering', 'delivered', 'delivery'],
    'economic_policy': ['economic policy'],
    'empathy': ['empathy'],
    'entrepreneur': ['entrepreneurship', 'entrepreneurs', 'entrepreneur'],
    'event': ['event'],
    'expert': ['expert'],
    'facilitate': [   'facilitators',
                      'facilitating',
                      'facilitator',
                      'facilitates',
                      'facilitated',
                      'facilitate'],
    'facilitator': ['facilitator'],
    'forbes': ['forbes.com', 'forbes'],
    'forum': ["forum's", 'forums', 'forum'],
    'founder': ['inagural member', 'founder'],
    'global_innovation_council': ['global innovation council'],
    'government': ['government'],
    'harvard_business_school': ['harvard business school'],
    'harvard_university': ['harvard university'],
    'influence': ['influence'],
    'influencer': [   'influencers',
                      'influencing',
                      'influencors',
                      'influenced',
                      'influencer',
                      'influencor'],
    'innovation_agenda': ['innovation agenda', 'innovator agenda'],
    'innovator': [   'serial innovator',
                     'innovations',
                     'innovating',
                     'innovators',
                     'innovation',
                     'innovaters',
                     'innovator',
                     'innovatod',
                     'innovated',
                     'innovates'],
    'inventor': [   'serial inventor',
                    'inventions',
                    'invention',
                    'inventors',
                    'inventing',
                    'inventor',
                    'invented'],
    'law': ['legislation', 'law'],
    'lecturer': [   'she has lectured',
                    'he has lectured',
                    'lecturing at',
                    'she lectures',
                    'he lectures',
                    'lectures',
                    'lecturer',
                    'lectured'],
    'master_inventor': ['master inventor'],
    'mediate': ['mediate'],
    'mentor': ['to support those', 'mentor'],
    'musician': ['musicians', 'musician'],
    'national_economic_policy': ['national economic policy'],
    'negotiate': ['negotiate'],
    'organization': ['organization'],
    'personal_touch': ['personal touch'],
    'perspective': ['perspectives', 'perspective'],
    'policy': ['policy'],
    'practitioner': [   'practitioners',
                        'practitioning',
                        'practitioned',
                        'practitioner'],
    'producer': ['producer'],
    'professor': ['professor'],
    'psychiatrist': ['psychiatrists', 'psychiatrist'],
    'publisher': ['publisher'],
    'role': ['role'],
    'school': ['school'],
    'senior_advisor': ['senior advisor'],
    'senior_inventor': ['senior inventor'],
    'skill': ['skill'],
    'skill_level': ['skill level'],
    'social_media_influencer': ['social media influencer'],
    'soft_skill': ['soft skill'],
    'startup': ['start ups', 'startups', 'start up', 'startup'],
    'the_economist': ['the economist'],
    'thought_leader': ['thought leader'],
    'trusted_advisor': ['trusted advisor'],
    'university': ['university'],
    'world_economic_forum': ['world economic forum'],
    'writer': ['writers', 'writer']}

    def data(self) -> dict:
        return self.__data

    def find(self,
             term: str) -> str or None:
        if term in self.__data:
            return self.__data[term]
