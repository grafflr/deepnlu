
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# pylint:disable=bad-whitespace
# pylint:disable=line-too-long
# pylint:disable=too-many-lines
# pylint:disable=invalid-name

# #########################################################
#
#       ************** !! WARNING !! ***************
#       ******* THIS FILE WAS AUTO-GENERATED *******
#       ********* DO NOT MODIFY THIS FILE **********
#
# #########################################################

class SkillsSynonymsRev(object):

    @staticmethod
    def prov() -> dict:
        return {
 'action': ['router.py',
            'plac_core.py',
            'owl2py_orchestrator.py',
            'generate_runtime_dictionaries.py',
            'generate_runtime_dictionary.py',
            'owl_data_load_dict.py',
            'common_utils.py'],
 'config': {'classname': 'SkillsSynonyms',
            'filename': 'skills_synonyms',
            'files': ['skills.txt'],
            'queries': ['synonyms.sparql'],
            'reverse': True,
            'transformers': ['lowercase', 'synonyms']},
 'source': 'skills.owl',
 'time': '2022-04-27 21:15:54.405856'}

    __data = {
    'ability': ['ability'],
    'academia': ['academic'],
    'academic': ['academic'],
    'academics': ['academic'],
    'activism': ['activist'],
    'activist': ['activist'],
    'activists': ['activist'],
    'adovacy': ['advocate'],
    'advisor': ['advisor'],
    'advisors': ['advisor'],
    'advocate': ['advocate'],
    'advocates': ['advocate'],
    'advocating': ['advocate'],
    'agenda': ['agenda'],
    'agendas': ['agenda'],
    'artifact': ['artifact'],
    'author': ['author'],
    'authors': ['author'],
    'beginner': ['beginner'],
    'board chair': ['board_chair'],
    'board_chair chair': ['board_chair'],
    'business academic': ['business_academic'],
    'business creativity': ['business_creativity'],
    'business role': ['business_role'],
    'business school': ['business_school'],
    'ceo': ['ceo'],
    'chair man': ['board_chair'],
    'chair men': ['board_chair'],
    'chair of': ['board_chair'],
    'chair of the': ['board_chair'],
    'chair people': ['board_chair'],
    'chair person': ['board_chair'],
    'chair woman': ['board_chair'],
    'chair women': ['board_chair'],
    'chairing': ['board_chair'],
    'chairman': ['board_chair'],
    'chairman of the board': ['board_chair'],
    'chairmen': ['board_chair'],
    'chairpeople': ['board_chair'],
    'chairperson': ['board_chair'],
    'chairwoman': ['board_chair'],
    'chairwoman of the board': ['board_chair'],
    'chairwomen': ['board_chair'],
    'chief executive officer': ['ceo'],
    'chief strategy officer': ['chief_strategy_officer'],
    'chief technical officer': ['cto'],
    'communication': ['communication'],
    'companies': ['company'],
    'company': ['company'],
    'council': ['council'],
    'creative': ['creative'],
    'creativity': ['creative'],
    'cto': ['cto'],
    'cxo': ['cxo'],
    'deliver': ['deliver'],
    'delivered': ['delivery'],
    'delivering': ['delivery'],
    'delivers': ['deliver'],
    'delivery': ['delivery'],
    'economic policy': ['economic_policy'],
    'empathy': ['empathy'],
    'entrepreneur': ['entrepreneur'],
    'entrepreneurs': ['entrepreneur'],
    'entrepreneurship': ['entrepreneur'],
    'event': ['event'],
    'expert': ['expert'],
    'facilitate': ['facilitate'],
    'facilitated': ['facilitate'],
    'facilitates': ['facilitate'],
    'facilitating': ['facilitate'],
    'facilitator': ['facilitate', 'facilitator'],
    'facilitators': ['facilitate'],
    'forbes': ['forbes'],
    'forbes.com': ['forbes'],
    'forum': ['forum'],
    "forum's": ['forum'],
    'forums': ['forum'],
    'founder': ['founder'],
    'global innovation council': ['global_innovation_council'],
    'government': ['government'],
    'harvard business school': ['harvard_business_school'],
    'harvard university': ['harvard_university'],
    'he has lectured': ['lecturer'],
    'he lectures': ['lecturer'],
    'inagural member': ['founder'],
    'influence': ['influence'],
    'influenced': ['influencer'],
    'influencer': ['influencer'],
    'influencers': ['influencer'],
    'influencing': ['influencer'],
    'influencor': ['influencer'],
    'influencors': ['influencer'],
    'innovated': ['innovator'],
    'innovaters': ['innovator'],
    'innovates': ['innovator'],
    'innovating': ['innovator'],
    'innovation': ['innovator'],
    'innovation agenda': ['innovation_agenda'],
    'innovations': ['innovator'],
    'innovatod': ['innovator'],
    'innovator': ['innovator'],
    'innovator agenda': ['innovation_agenda'],
    'innovators': ['innovator'],
    'invented': ['inventor'],
    'inventing': ['inventor'],
    'invention': ['inventor'],
    'inventions': ['inventor'],
    'inventor': ['inventor'],
    'inventors': ['inventor'],
    'law': ['law'],
    'lectured': ['lecturer'],
    'lecturer': ['lecturer'],
    'lectures': ['lecturer'],
    'lecturing at': ['lecturer'],
    'legislation': ['law'],
    'master inventor': ['master_inventor'],
    'mediate': ['mediate'],
    'mentor': ['mentor'],
    'musician': ['musician'],
    'musicians': ['musician'],
    'national economic policy': ['national_economic_policy'],
    'negotiate': ['negotiate'],
    'novice': ['beginner'],
    'organization': ['organization'],
    'past chair': ['board_chair'],
    'personal touch': ['personal_touch'],
    'perspective': ['perspective'],
    'perspectives': ['perspective'],
    'policy': ['policy'],
    'practitioned': ['practitioner'],
    'practitioner': ['practitioner'],
    'practitioners': ['practitioner'],
    'practitioning': ['practitioner'],
    'present chair': ['board_chair'],
    'producer': ['producer'],
    'professor': ['professor'],
    'psychiatrist': ['psychiatrist'],
    'psychiatrists': ['psychiatrist'],
    'publisher': ['publisher'],
    'role': ['role'],
    'school': ['school'],
    'senior advisor': ['senior_advisor'],
    'senior inventor': ['senior_inventor'],
    'serial innovator': ['innovator'],
    'serial inventor': ['inventor'],
    'she has lectured': ['lecturer'],
    'she lectures': ['lecturer'],
    'skill': ['skill'],
    'skill level': ['skill_level'],
    'social media influencer': ['social_media_influencer'],
    'soft skill': ['soft_skill'],
    'start up': ['startup'],
    'start ups': ['startup'],
    'startup': ['startup'],
    'startups': ['startup'],
    'the economist': ['the_economist'],
    'thought leader': ['thought_leader'],
    'to support those': ['mentor'],
    'trusted advisor': ['trusted_advisor'],
    'university': ['university'],
    'world economic forum': ['world_economic_forum'],
    'writer': ['writer'],
    'writers': ['writer']}

    def data(self) -> dict:
        return self.__data

    def find(self,
             term: str) -> str or None:
        if term in self.__data:
            return self.__data[term]
